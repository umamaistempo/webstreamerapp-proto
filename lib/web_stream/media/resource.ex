defmodule WebStream.Media.Resource do
  @doc """
  The abstract representation of a media resource.

  A media resource can be something like a video (and point to several different files of it in different resolutions);
  those specializations of the media resource should implement their own schema expanding this abstract resource.

  Currently, those specializations are:
    _none_
  """

  use Ecto.Schema
  import Ecto.Changeset

  @type t() :: %__MODULE__{}
  @type changeset() :: Ecto.Changeset.t(%__MODULE__{})
  @type create_params() :: %{
    required(:title) => String.t()
  }
  @type update_params() :: %{
    optional(:title) => String.t()
  }
  @typep changeable_attributes() :: %{
    optional(:title) => String.t()
  }

  @primary_key false
  @timestamp_opts [type: :utc_datetime]
  schema "media_resources" do
    # TODO: Maybe implement a custom ecto type for postgre's UUID
    # NOTE: Currently autogenerated on database, for this reason we are reading after write
    field :uuid, :binary_id, read_after_writes: true
    field :title, :string, source: :fallback_title

    timestamps()
  end

  @spec create(title()) :: changeset()
  @doc """
  Prepares a changeset to _create_ a new Resource.

  ## Examples

      iex> WebStream.Media.Resource.create("Example")
      %Ecto.Changeset{
        action: :insert,
        data: %WebStream.Media.Resource{}
      }

      iex> "Example"
      ...> |> WebStream.Media.Resource.create()
      ...> |> Ecto.Changeset.apply_changes()
      %WebStream.Media.Resource{title: "Example"}
  """
  def create(title) do
    %__MODULE__{}
    |> changeset(%{title: title})
    |> Map.put(:action, :insert)
  end

  @spec update(t(), changeable_attributes()) :: changeset()
  @doc """
  Prepares a changeset to _update_ an existing Resource.

  ## Examples


      iex> "Old title"
      ...> |> WebStream.Media.Resource.create()
      ...> |> Ecto.Changeset.apply_changes()
      ...> |> WebStream.Media.Resource.update(%{title: "New title"})
      %Ecto.Changeset{
        action: :update,
        data: %WebStream.Media.Resource{},
      }

      iex> "Old title"
      ...> |> WebStream.Media.Resource.create()
      ...> |> Ecto.Changeset.apply_changes()
      ...> |> WebStream.Media.Resource.update(%{title: "New title"})
      ...> |> Ecto.Changeset.apply_changes()
      %WebStream.Media.Resource{
        title: "New title"
      }
  """
  def update(resource, input) do
    params = rename_input_keys(input)
    resource
    |> changeset(params)
    |> Map.put(:action, :update)
  end

  @spec changeset(changeset() | t(), changeable_attributes()) :: changeset()
  defp changeset(resource, input) do
    params = rename_input_keys(input)
    resource
    |> cast(params, [:title])
    |> validate_required([:title])
  end
end
